# üöÄ Calendar Insights GitLab CI/CD Pipeline

stages:
  - security
  - test
  - build
  - deploy-dev
  - deploy-prod
  - deploy-manual

variables:
  PROJECT_ID: "cal-insights-460511"
  REGION: "europe-west3"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  SERVICE_NAME: "calendar-insights"
  REPOSITORY_NAME: "calendar-insights-repo"
  DOCKER_REGISTRY: "europe-west3-docker.pkg.dev"
  IMAGE_NAME: "${DOCKER_REGISTRY}/${PROJECT_ID}/${REPOSITORY_NAME}/${SERVICE_NAME}"
  DEPLOY_APP: "false"          # Set to "true" to deploy self-hosted app
  DEPLOY_APP_GCP: "false"      # Set to "true" to deploy app-gcp to Cloud Run
  DEPLOY_ENVIRONMENT: "production"  # Options: production, development, staging

# Security scanning for the entire repository
security-scan:
  stage: security
  image: alpine:latest
  before_script:
    - apk add --no-cache git grep
  script:
    - echo "üîê Running security scans..."
    # Check for potential secrets
    - |
      if grep -r -E "(password|secret|token|key).*[:=]\s*['\"][^'\"]{8,}" --exclude-dir=.git --exclude="*.md" .; then
        echo "‚ùå Potential hardcoded secrets found!"
        exit 1
      fi
    - echo "‚úÖ No hardcoded secrets detected"
    # Check .gitignore patterns
    - |
      if [ ! -f .gitignore ]; then
        echo "‚ùå .gitignore file missing!"
        exit 1
      fi
    - echo "‚úÖ Security scan completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web"

secret-detection:
  stage: security
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest
  script:
    - echo "üîç Running GitLab secret detection..."
    - /analyzer run
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "web"

# Code quality and testing for both applications
.test-template: &test-template
  stage: test
  image: python:3.11-slim
  before_script:
    - cd $APP_DIR
    - pip install --upgrade pip
    - pip install black flake8 isort pytest
    - pip install -r requirements.txt
  script:
    - echo "üìä Running code quality checks for $APP_DIR..."
    # Format checking
    - black --check --diff . || echo "‚ö†Ô∏è Code formatting issues found"
    # Import sorting
    - isort --check-only --diff . || echo "‚ö†Ô∏è Import sorting issues found"
    # Linting
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    # Basic import testing
    - |
      python -c "
      import sys
      sys.path.insert(0, '.')
      try:
          if '$APP_DIR' == 'app':
              import database
              import main_dashboard
              print('‚úÖ App imports successful')
          else:
              import database
              import dashboard  
              import calendar_service
              print('‚úÖ App-GCP imports successful')
      except Exception as e:
          print(f'‚ùå Import error: {e}')
          sys.exit(1)
      "
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web"

test-app:
  <<: *test-template
  variables:
    APP_DIR: "app"

test-app-gcp:
  <<: *test-template
  variables:
    APP_DIR: "app-gcp"

# Docker build jobs for both applications
.build-template: &build-template
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "üê≥ Building Docker image for $APP_DIR..."
    - cd $APP_DIR
    - docker build -t calendar-insights-$APP_DIR:$CI_COMMIT_SHA .
    - docker build -t calendar-insights-$APP_DIR:latest .
    # Basic smoke test
    - |
      if [ "$APP_DIR" == "app" ]; then
        echo "üß™ Testing app/ container..."
        docker run --rm -d --name test-app calendar-insights-$APP_DIR:latest
        sleep 10
        docker logs test-app
        docker stop test-app || true
      else
        echo "üß™ Testing app-gcp/ container..."
        docker run --rm -d --name test-gcp -p 8080:8080 calendar-insights-$APP_DIR:latest &
        sleep 15
        if docker ps | grep test-gcp; then
          echo "‚úÖ Container started successfully"
          docker stop test-gcp || true
        else
          echo "‚ùå Container failed to start"
          docker logs test-gcp || true
          exit 1
        fi
      fi
    - echo "‚úÖ Docker build and test completed for $APP_DIR"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_PIPELINE_SOURCE == "web"

build-app:
  <<: *build-template
  variables:
    APP_DIR: "app"

build-app-gcp:
  <<: *build-template
  variables:
    APP_DIR: "app-gcp"

# Development deployment (for develop branch)
deploy-development:
  stage: deploy-dev
  image: alpine:latest
  script:
    - echo "üõ†Ô∏è Development deployment ready"
    - |
      cat << EOF
      ## üõ†Ô∏è Development Deployment Summary
      
      ### Self-Hosted Application (app/)
      - **Type**: Full-stack with supervisor, cron, local DB
      - **Deployment**: Use docker-compose.yml or Docker
      - **Port**: 8501
      - **Features**: Complete calendar analytics pipeline
      
      ### GCP Application (app-gcp/)
      - **Type**: Cloud-native serverless
      - **Deployment**: Cloud Run (automated on main)
      - **Features**: Auto-scaling, Cloud SQL integration
      
      ### Manual Deployment Options:
      1. Set DEPLOY_APP="true" to prepare self-hosted deployment
      2. Set DEPLOY_APP_GCP="true" to deploy to Cloud Run
      3. Set DEPLOY_ENVIRONMENT to target specific environment
      
      ### Next Steps:
      1. For self-hosted: Use app/docker-compose.yml
      2. For cloud: Merge to main or trigger manual deployment
      
      EOF
    - echo "‚úÖ Development artifacts ready"
  environment:
    name: development
    url: http://localhost:8501
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# Production deployment to Google Cloud (app-gcp)
deploy-app-gcp-production:
  stage: deploy-prod
  image: google/cloud-sdk:alpine
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - docker info
    # Authenticate with GCP using service account
    - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-key.json
    - gcloud auth activate-service-account --key-file gcp-key.json
    - gcloud config set project $PROJECT_ID
    - gcloud auth configure-docker
  script:
    - echo "üöÄ Deploying app-gcp to Google Cloud Run..."
    - cd app-gcp
    
    # Build and push to Google Container Registry
    - docker build -t gcr.io/$PROJECT_ID/calendar-insights:$CI_COMMIT_SHA .
    - docker build -t gcr.io/$PROJECT_ID/calendar-insights:latest .
    - docker push gcr.io/$PROJECT_ID/calendar-insights:$CI_COMMIT_SHA
    - docker push gcr.io/$PROJECT_ID/calendar-insights:latest
    
    # Deploy to Cloud Run
    - |
      gcloud run deploy calendar-insights \
        --image gcr.io/$PROJECT_ID/calendar-insights:$CI_COMMIT_SHA \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --port 8080 \
        --memory 2Gi \
        --cpu 2 \
        --max-instances 10 \
        --timeout 300 \
        --set-env-vars="ENVIRONMENT=$DEPLOY_ENVIRONMENT,CI_COMMIT_SHA=$CI_COMMIT_SHA" \
        --project $PROJECT_ID
    
    # Get and display service URL
    - URL=$(gcloud run services describe calendar-insights --region=$REGION --format='value(status.url)')
    - echo "üåê Application deployed successfully!"
    - echo "üîó URL: $URL"
    - echo "üìä Dashboard: $URL"
    - echo "üîç Monitoring: https://console.cloud.google.com/run/detail/$REGION/calendar-insights"
    
  environment:
    name: production
    url: https://calendar-insights-675167879402.europe-west3.run.app
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $GCP_SERVICE_ACCOUNT_KEY
    - if: $CI_PIPELINE_SOURCE == "web" && $DEPLOY_APP_GCP == "true"

# Self-hosted app deployment preparation
deploy-app-selfhosted:
  stage: deploy-prod
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "üè† Preparing self-hosted app deployment..."
    - cd app
    - |
      # Build production-ready image
      docker build -t calendar-insights-app:$DEPLOY_ENVIRONMENT .
      docker build -t calendar-insights-app:latest .
    - echo "‚úÖ Self-hosted app Docker image built successfully"
    - |
      # Create deployment package information
      cat << EOF
      ## üè† Self-Hosted App Deployment Ready
      
      ### Docker Image Built:
      - **Image**: calendar-insights-app:$DEPLOY_ENVIRONMENT
      - **Latest**: calendar-insights-app:latest
      - **Environment**: $DEPLOY_ENVIRONMENT
      
      ### Deployment Options:
      
      #### Using Docker Compose (Recommended):
      \`\`\`bash
      cd app/
      docker-compose up -d
      \`\`\`
      
      #### Using Docker:
      \`\`\`bash
      docker run -d -p 8501:8501 --name calendar-insights calendar-insights-app:latest
      \`\`\`
      
      ### Access:
      - Application: http://localhost:8501
      - Environment: $DEPLOY_ENVIRONMENT
      
      ### Features:
      - Complete calendar analytics pipeline
      - Local PostgreSQL database
      - Supervisor process management
      - Cron job scheduling
      EOF
  environment:
    name: self-hosted
    url: http://localhost:8501
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $DEPLOY_APP == "true"

# Manual deployment controls
manual-deploy-app-gcp:
  stage: deploy-manual
  image: google/cloud-sdk:alpine
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: /certs
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: $DOCKER_TLS_CERTDIR/client
  before_script:
    - docker info
    - echo $GCP_SERVICE_ACCOUNT_KEY | base64 -d > gcp-key.json
    - gcloud auth activate-service-account --key-file gcp-key.json
    - gcloud config set project $PROJECT_ID
    - gcloud auth configure-docker
  script:
    - echo "üöÄ Manual deployment of app-gcp to Google Cloud Run..."
    - echo "Environment: $DEPLOY_ENVIRONMENT"
    - cd app-gcp
    - |
      SERVICE_NAME="calendar-insights"
      if [ "$DEPLOY_ENVIRONMENT" != "production" ]; then
        SERVICE_NAME="calendar-insights-$DEPLOY_ENVIRONMENT"
      fi
    - docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:manual-$CI_COMMIT_SHA .
    - docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:manual-$CI_COMMIT_SHA
    - |
      gcloud run deploy $SERVICE_NAME \
        --image gcr.io/$PROJECT_ID/$SERVICE_NAME:manual-$CI_COMMIT_SHA \
        --platform managed \
        --region $REGION \
        --allow-unauthenticated \
        --port 8080 \
        --memory 2Gi \
        --cpu 2 \
        --max-instances 10 \
        --timeout 300 \
        --set-env-vars="ENVIRONMENT=$DEPLOY_ENVIRONMENT,DEPLOYMENT_TYPE=manual" \
        --project $PROJECT_ID
    - URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
    - echo "üåê Manual deployment completed!"
    - echo "üîó URL: $URL"
  environment:
    name: manual-gcp
  when: manual
  allow_failure: true

manual-deploy-app:
  stage: deploy-manual
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - docker info
  script:
    - echo "üè† Manual deployment preparation for self-hosted app..."
    - echo "Environment: $DEPLOY_ENVIRONMENT"
    - cd app
    - docker build -t calendar-insights-app:manual-$CI_COMMIT_SHA .
    - echo "‚úÖ Manual deployment image ready"
    - |
      cat << EOF
      ## üè† Manual Self-Hosted Deployment Ready
      
      ### Instructions:
      1. Pull this Docker image to your server
      2. Run with: \`docker run -d -p 8501:8501 calendar-insights-app:manual-$CI_COMMIT_SHA\`
      3. Or use docker-compose.yml for full stack deployment
      
      ### Environment: $DEPLOY_ENVIRONMENT
      ### Image: calendar-insights-app:manual-$CI_COMMIT_SHA
      ### Access: http://localhost:8501
      EOF
  environment:
    name: manual-selfhosted
  when: manual
  allow_failure: true

# Deployment status and control
deployment-control:
  stage: deploy-manual
  image: alpine:latest
  script:
    - echo "üéõÔ∏è Deployment Control Center"
    - |
      cat << EOF
      ## üöÄ Calendar Insights Deployment Options
      
      ### Automatic Deployments:
      - **main branch** ‚Üí app-gcp to production Cloud Run
      - **develop branch** ‚Üí development artifacts ready
      
      ### Manual Deployment Controls:
      
      #### To deploy app-gcp to Cloud Run:
      1. Set variable: \`DEPLOY_APP_GCP="true"\`
      2. Set variable: \`DEPLOY_ENVIRONMENT="production|development|staging"\`
      3. Trigger pipeline or use manual job
      
      #### To deploy self-hosted app:
      1. Set variable: \`DEPLOY_APP="true"\`
      2. Set variable: \`DEPLOY_ENVIRONMENT="production|development|staging"\`
      3. Trigger pipeline or use manual job
      
      #### To deploy both:
      1. Set both \`DEPLOY_APP="true"\` and \`DEPLOY_APP_GCP="true"\`
      2. Set \`DEPLOY_ENVIRONMENT\` as needed
      3. Trigger pipeline
      
      ### Current Settings:
      - DEPLOY_APP: $DEPLOY_APP
      - DEPLOY_APP_GCP: $DEPLOY_APP_GCP
      - DEPLOY_ENVIRONMENT: $DEPLOY_ENVIRONMENT
      
      ### Available Manual Jobs:
      - manual-deploy-app-gcp
      - manual-deploy-app
      EOF
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
  when: manual
  allow_failure: true
